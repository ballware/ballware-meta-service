name: Analyse SonarQube Latest

on:
  push:
    branches: ['main', 'develop', 'feature/*', 'bugfix/*', 'ballware/copilot/*']  

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  sonarqube:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  
      - name: Setup dotnet
        uses: actions/setup-dotnet@v4
        with: 
          dotnet-version: 
            8.0
          
      - name: Install dotCover CLI
        run: dotnet tool install --global JetBrains.dotCover.CommandLineTools --version 2025.1.7
          
      - name: Install SonarQube
        run: dotnet tool install --global dotnet-sonarscanner
        
      - name: Start SonarQube scan
        run: | 
          dotnet sonarscanner begin \
            /k:"ballware_ballware-meta-service" \
            /o:"ballware" \
            /d:sonar.token="${{ secrets.SONAR_TOKEN }}" \
            /d:sonar.cs.dotcover.reportsPaths="coverage.html" \
            /d:sonar.exclusions="**/Migrations/**/*"
          
      - name: Restore dependencies
        run: |
          dotnet nuget add source "https://nuget.pkg.github.com/ballware/index.json" \
            --name github \
            --username ${{ github.actor }} \
            --password ${{ secrets.GITHUB_TOKEN }} \
            --store-password-in-clear-text
          dotnet restore ballware-meta-service.sln         
          
      - name: Build solution
        run: dotnet build ballware-meta-service.sln --no-incremental --configuration Release

      - name: Run coverage for all test projects
        run: |
          mkdir -p coverage
          export TestSettings__DatabasePassword='${{ secrets.TEST_META_PASSWORD }}'
          i=0
          find ./test -name '*.Tests.csproj' | while read project; do
            echo "Running coverage for: $project"
            dotCover cover \
              --TargetExecutable="/usr/bin/dotnet" \
              --TargetArguments="test $project --configuration Release --logger trx" \
              --Output="coverage/project_$i.dcvr" \
              --ReturnTargetExitCode
            ((i=i+1))
          done

      - name: Merge coverage snapshots
        run: |
          snapshots=$(find coverage -name '*.dcvr' | paste -sd ';' -)
          dotCover merge \
            --Source="$snapshots" \
            --Output="coverage.dcvr"
          
      - name: Generate HTML report for SonarCloud
        run: |
          dotCover report \
            --Source="coverage.dcvr" \
            --Output="coverage.html" \
            --ReportType=HTML           
        
      - name: End SonarQube scan
        run: dotnet sonarscanner end /d:sonar.token="${{ secrets.SONAR_TOKEN }}" 
