// <auto-generated />
using System;
using Ballware.Meta.Data.Ef.Postgres;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Ballware.Meta.Data.Ef.Postgres.Migrations
{
    [DbContext(typeof(MetaDbContext))]
    partial class MetaDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.17")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Ballware.Meta.Data.Persistables.Characteristic", b =>
                {
                    b.Property<long?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long?>("Id"));

                    b.Property<DateTime?>("CreateStamp")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("create_stamp");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("creator_id");

                    b.Property<string>("Identifier")
                        .HasColumnType("text")
                        .HasColumnName("identifier");

                    b.Property<DateTime?>("LastChangeStamp")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_change_stamp");

                    b.Property<Guid?>("LastChangerId")
                        .HasColumnType("uuid")
                        .HasColumnName("last_changer_id");

                    b.Property<string>("LookupDisplayMember")
                        .HasColumnType("text")
                        .HasColumnName("lookup_display_member");

                    b.Property<Guid?>("LookupId")
                        .HasColumnType("uuid")
                        .HasColumnName("lookup_id");

                    b.Property<string>("LookupValueMember")
                        .HasColumnType("text")
                        .HasColumnName("lookup_value_member");

                    b.Property<bool?>("Multi")
                        .HasColumnType("boolean")
                        .HasColumnName("multi");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uuid")
                        .HasColumnName("tenant_id");

                    b.Property<int>("Type")
                        .HasColumnType("integer")
                        .HasColumnName("type");

                    b.Property<Guid>("Uuid")
                        .HasColumnType("uuid")
                        .HasColumnName("uuid")
                        .HasAnnotation("Relational:JsonPropertyName", "Id");

                    b.HasKey("Id")
                        .HasName("pk_characteristic");

                    b.HasIndex("TenantId")
                        .HasDatabaseName("ix_characteristic_tenant_id");

                    b.HasIndex("TenantId", "Identifier")
                        .IsUnique()
                        .HasDatabaseName("ix_characteristic_tenant_id_identifier");

                    b.HasIndex("TenantId", "Uuid")
                        .IsUnique()
                        .HasDatabaseName("ix_characteristic_tenant_id_uuid");

                    b.ToTable("characteristic", (string)null);
                });

            modelBuilder.Entity("Ballware.Meta.Data.Persistables.CharacteristicAssociation", b =>
                {
                    b.Property<long?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long?>("Id"));

                    b.Property<bool?>("Active")
                        .HasColumnType("boolean")
                        .HasColumnName("active");

                    b.Property<Guid?>("CharacteristicGroupId")
                        .HasColumnType("uuid")
                        .HasColumnName("characteristic_group_id");

                    b.Property<Guid?>("CharacteristicId")
                        .HasColumnType("uuid")
                        .HasColumnName("characteristic_id");

                    b.Property<DateTime?>("CreateStamp")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("create_stamp");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("creator_id");

                    b.Property<string>("Entity")
                        .HasColumnType("text")
                        .HasColumnName("entity");

                    b.Property<string>("Identifier")
                        .HasColumnType("text")
                        .HasColumnName("identifier");

                    b.Property<DateTime?>("LastChangeStamp")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_change_stamp");

                    b.Property<Guid?>("LastChangerId")
                        .HasColumnType("uuid")
                        .HasColumnName("last_changer_id");

                    b.Property<int?>("Length")
                        .HasColumnType("integer")
                        .HasColumnName("length");

                    b.Property<bool?>("Readonly")
                        .HasColumnType("boolean")
                        .HasColumnName("readonly");

                    b.Property<bool?>("Required")
                        .HasColumnType("boolean")
                        .HasColumnName("required");

                    b.Property<int?>("Sorting")
                        .HasColumnType("integer")
                        .HasColumnName("sorting");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uuid")
                        .HasColumnName("tenant_id");

                    b.Property<int>("Type")
                        .HasColumnType("integer")
                        .HasColumnName("type");

                    b.Property<Guid>("Uuid")
                        .HasColumnType("uuid")
                        .HasColumnName("uuid")
                        .HasAnnotation("Relational:JsonPropertyName", "Id");

                    b.HasKey("Id")
                        .HasName("pk_characteristic_association");

                    b.HasIndex("TenantId", "Entity")
                        .HasDatabaseName("ix_characteristic_association_tenant_id_entity");

                    b.HasIndex("TenantId", "Uuid")
                        .IsUnique()
                        .HasDatabaseName("ix_characteristic_association_tenant_id_uuid");

                    b.HasIndex("TenantId", "Entity", "CharacteristicId")
                        .IsUnique()
                        .HasDatabaseName("ix_characteristic_association_tenant_id_entity_characteristic_");

                    b.ToTable("characteristic_association", (string)null);
                });

            modelBuilder.Entity("Ballware.Meta.Data.Persistables.CharacteristicGroup", b =>
                {
                    b.Property<long?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long?>("Id"));

                    b.Property<DateTime?>("CreateStamp")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("create_stamp");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("creator_id");

                    b.Property<string>("Entity")
                        .HasColumnType("text")
                        .HasColumnName("entity");

                    b.Property<DateTime?>("LastChangeStamp")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_change_stamp");

                    b.Property<Guid?>("LastChangerId")
                        .HasColumnType("uuid")
                        .HasColumnName("last_changer_id");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("RegisterName")
                        .HasColumnType("text")
                        .HasColumnName("register_name");

                    b.Property<int?>("Sorting")
                        .HasColumnType("integer")
                        .HasColumnName("sorting");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uuid")
                        .HasColumnName("tenant_id");

                    b.Property<Guid>("Uuid")
                        .HasColumnType("uuid")
                        .HasColumnName("uuid")
                        .HasAnnotation("Relational:JsonPropertyName", "Id");

                    b.HasKey("Id")
                        .HasName("pk_characteristic_group");

                    b.HasIndex("TenantId", "Entity")
                        .HasDatabaseName("ix_characteristic_group_tenant_id_entity");

                    b.HasIndex("TenantId", "Uuid")
                        .IsUnique()
                        .HasDatabaseName("ix_characteristic_group_tenant_id_uuid");

                    b.HasIndex("TenantId", "Entity", "Name")
                        .IsUnique()
                        .HasDatabaseName("ix_characteristic_group_tenant_id_entity_name");

                    b.ToTable("characteristic_group", (string)null);
                });

            modelBuilder.Entity("Ballware.Meta.Data.Persistables.Document", b =>
                {
                    b.Property<long?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long?>("Id"));

                    b.Property<DateTime?>("CreateStamp")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("create_stamp");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("creator_id");

                    b.Property<string>("DisplayName")
                        .HasColumnType("text")
                        .HasColumnName("display_name");

                    b.Property<string>("Entity")
                        .HasColumnType("text")
                        .HasColumnName("entity");

                    b.Property<DateTime?>("LastChangeStamp")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_change_stamp");

                    b.Property<Guid?>("LastChangerId")
                        .HasColumnType("uuid")
                        .HasColumnName("last_changer_id");

                    b.Property<byte[]>("ReportBinary")
                        .HasColumnType("bytea")
                        .HasColumnName("report_binary");

                    b.Property<string>("ReportParameter")
                        .HasColumnType("text")
                        .HasColumnName("report_parameter");

                    b.Property<int>("State")
                        .HasColumnType("integer")
                        .HasColumnName("state");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uuid")
                        .HasColumnName("tenant_id");

                    b.Property<Guid>("Uuid")
                        .HasColumnType("uuid")
                        .HasColumnName("uuid")
                        .HasAnnotation("Relational:JsonPropertyName", "Id");

                    b.HasKey("Id")
                        .HasName("pk_document");

                    b.HasIndex("TenantId")
                        .HasDatabaseName("ix_document_tenant_id");

                    b.HasIndex("TenantId", "Uuid")
                        .IsUnique()
                        .HasDatabaseName("ix_document_tenant_id_uuid");

                    b.ToTable("document", (string)null);
                });

            modelBuilder.Entity("Ballware.Meta.Data.Persistables.Documentation", b =>
                {
                    b.Property<long?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long?>("Id"));

                    b.Property<string>("Content")
                        .HasColumnType("text")
                        .HasColumnName("content");

                    b.Property<DateTime?>("CreateStamp")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("create_stamp");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("creator_id");

                    b.Property<string>("Entity")
                        .HasColumnType("text")
                        .HasColumnName("entity");

                    b.Property<string>("Field")
                        .HasColumnType("text")
                        .HasColumnName("field");

                    b.Property<DateTime?>("LastChangeStamp")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_change_stamp");

                    b.Property<Guid?>("LastChangerId")
                        .HasColumnType("uuid")
                        .HasColumnName("last_changer_id");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uuid")
                        .HasColumnName("tenant_id");

                    b.Property<Guid>("Uuid")
                        .HasColumnType("uuid")
                        .HasColumnName("uuid")
                        .HasAnnotation("Relational:JsonPropertyName", "Id");

                    b.HasKey("Id")
                        .HasName("pk_documentation");

                    b.HasIndex("TenantId")
                        .HasDatabaseName("ix_documentation_tenant_id");

                    b.HasIndex("TenantId", "Uuid")
                        .IsUnique()
                        .HasDatabaseName("ix_documentation_tenant_id_uuid");

                    b.HasIndex("TenantId", "Entity", "Field")
                        .IsUnique()
                        .HasDatabaseName("ix_documentation_tenant_id_entity_field");

                    b.ToTable("documentation", (string)null);
                });

            modelBuilder.Entity("Ballware.Meta.Data.Persistables.EntityMetadata", b =>
                {
                    b.Property<long?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long?>("Id"));

                    b.Property<string>("Application")
                        .HasColumnType("text")
                        .HasColumnName("application");

                    b.Property<string>("BaseUrl")
                        .HasColumnType("text")
                        .HasColumnName("base_url");

                    b.Property<string>("BeforeSaveScript")
                        .HasColumnType("text")
                        .HasColumnName("before_save_script");

                    b.Property<string>("ByIdQuery")
                        .HasColumnType("text")
                        .HasColumnName("by_id_query");

                    b.Property<string>("ByIdScript")
                        .HasColumnType("text")
                        .HasColumnName("by_id_script");

                    b.Property<DateTime?>("CreateStamp")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("create_stamp");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("creator_id");

                    b.Property<string>("CustomFunctions")
                        .HasColumnType("text")
                        .HasColumnName("custom_functions");

                    b.Property<string>("CustomScripts")
                        .HasColumnType("text")
                        .HasColumnName("custom_scripts");

                    b.Property<string>("DisplayName")
                        .HasColumnType("text")
                        .HasColumnName("display_name");

                    b.Property<string>("EditLayout")
                        .HasColumnType("text")
                        .HasColumnName("edit_layout");

                    b.Property<string>("Entity")
                        .HasColumnType("text")
                        .HasColumnName("entity");

                    b.Property<bool>("GeneratedSchema")
                        .HasColumnType("boolean")
                        .HasColumnName("generated_schema");

                    b.Property<string>("GridLayout")
                        .HasColumnType("text")
                        .HasColumnName("grid_layout");

                    b.Property<string>("Indices")
                        .HasColumnType("text")
                        .HasColumnName("indices");

                    b.Property<string>("ItemMappingScript")
                        .HasColumnType("text")
                        .HasColumnName("item_mapping_script");

                    b.Property<string>("ItemReverseMappingScript")
                        .HasColumnType("text")
                        .HasColumnName("item_reverse_mapping_script");

                    b.Property<DateTime?>("LastChangeStamp")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_change_stamp");

                    b.Property<Guid?>("LastChangerId")
                        .HasColumnType("uuid")
                        .HasColumnName("last_changer_id");

                    b.Property<string>("ListQuery")
                        .HasColumnType("text")
                        .HasColumnName("list_query");

                    b.Property<string>("ListScript")
                        .HasColumnType("text")
                        .HasColumnName("list_script");

                    b.Property<string>("Lookups")
                        .HasColumnType("text")
                        .HasColumnName("lookups");

                    b.Property<bool>("Meta")
                        .HasColumnType("boolean")
                        .HasColumnName("meta");

                    b.Property<string>("NewQuery")
                        .HasColumnType("text")
                        .HasColumnName("new_query");

                    b.Property<bool>("NoIdentity")
                        .HasColumnType("boolean")
                        .HasColumnName("no_identity");

                    b.Property<string>("Picklists")
                        .HasColumnType("text")
                        .HasColumnName("picklists");

                    b.Property<string>("ProviderModelDefinition")
                        .HasColumnType("text")
                        .HasColumnName("provider_model_definition");

                    b.Property<string>("RemovePreliminaryCheckScript")
                        .HasColumnType("text")
                        .HasColumnName("remove_preliminary_check_script");

                    b.Property<string>("RemoveScript")
                        .HasColumnType("text")
                        .HasColumnName("remove_script");

                    b.Property<string>("RemoveStatement")
                        .HasColumnType("text")
                        .HasColumnName("remove_statement");

                    b.Property<string>("SaveScript")
                        .HasColumnType("text")
                        .HasColumnName("save_script");

                    b.Property<string>("SaveStatement")
                        .HasColumnType("text")
                        .HasColumnName("save_statement");

                    b.Property<string>("ScalarValueQuery")
                        .HasColumnType("text")
                        .HasColumnName("scalar_value_query");

                    b.Property<string>("StateAllowedScript")
                        .HasColumnType("text")
                        .HasColumnName("state_allowed_script");

                    b.Property<string>("StateColumn")
                        .HasColumnType("text")
                        .HasColumnName("state_column");

                    b.Property<string>("StateReasonColumn")
                        .HasColumnType("text")
                        .HasColumnName("state_reason_column");

                    b.Property<string>("Templates")
                        .HasColumnType("text")
                        .HasColumnName("templates");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uuid")
                        .HasColumnName("tenant_id");

                    b.Property<Guid>("Uuid")
                        .HasColumnType("uuid")
                        .HasColumnName("uuid")
                        .HasAnnotation("Relational:JsonPropertyName", "Id");

                    b.HasKey("Id")
                        .HasName("pk_entity");

                    b.HasIndex("TenantId")
                        .HasDatabaseName("ix_entity_tenant_id");

                    b.HasIndex("TenantId", "Uuid")
                        .IsUnique()
                        .HasDatabaseName("ix_entity_tenant_id_uuid");

                    b.ToTable("entity", (string)null);
                });

            modelBuilder.Entity("Ballware.Meta.Data.Persistables.EntityRight", b =>
                {
                    b.Property<long?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long?>("Id"));

                    b.Property<string>("Container")
                        .HasColumnType("text")
                        .HasColumnName("container");

                    b.Property<DateTime?>("CreateStamp")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("create_stamp");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("creator_id");

                    b.Property<string>("DisplayName")
                        .HasColumnType("text")
                        .HasColumnName("display_name");

                    b.Property<string>("Entity")
                        .HasColumnType("text")
                        .HasColumnName("entity");

                    b.Property<string>("Identifier")
                        .HasColumnType("text")
                        .HasColumnName("identifier");

                    b.Property<DateTime?>("LastChangeStamp")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_change_stamp");

                    b.Property<Guid?>("LastChangerId")
                        .HasColumnType("uuid")
                        .HasColumnName("last_changer_id");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uuid")
                        .HasColumnName("tenant_id");

                    b.Property<Guid>("Uuid")
                        .HasColumnType("uuid")
                        .HasColumnName("uuid")
                        .HasAnnotation("Relational:JsonPropertyName", "Id");

                    b.HasKey("Id")
                        .HasName("pk_entity_right");

                    b.HasIndex("TenantId", "Entity")
                        .HasDatabaseName("ix_entity_right_tenant_id_entity");

                    b.HasIndex("TenantId", "Uuid")
                        .IsUnique()
                        .HasDatabaseName("ix_entity_right_tenant_id_uuid");

                    b.ToTable("entity_right", (string)null);
                });

            modelBuilder.Entity("Ballware.Meta.Data.Persistables.Export", b =>
                {
                    b.Property<long?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long?>("Id"));

                    b.Property<string>("Application")
                        .HasColumnType("text")
                        .HasColumnName("application");

                    b.Property<DateTime?>("CreateStamp")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("create_stamp");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("creator_id");

                    b.Property<string>("Entity")
                        .HasColumnType("text")
                        .HasColumnName("entity");

                    b.Property<DateTime?>("ExpirationStamp")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("expiration_stamp");

                    b.Property<DateTime?>("LastChangeStamp")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_change_stamp");

                    b.Property<Guid?>("LastChangerId")
                        .HasColumnType("uuid")
                        .HasColumnName("last_changer_id");

                    b.Property<string>("MediaType")
                        .HasColumnType("text")
                        .HasColumnName("media_type");

                    b.Property<string>("Query")
                        .HasColumnType("text")
                        .HasColumnName("query");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uuid")
                        .HasColumnName("tenant_id");

                    b.Property<Guid>("Uuid")
                        .HasColumnType("uuid")
                        .HasColumnName("uuid")
                        .HasAnnotation("Relational:JsonPropertyName", "Id");

                    b.HasKey("Id")
                        .HasName("pk_export");

                    b.HasIndex("TenantId")
                        .HasDatabaseName("ix_export_tenant_id");

                    b.HasIndex("TenantId", "Uuid")
                        .IsUnique()
                        .HasDatabaseName("ix_export_tenant_id_uuid");

                    b.ToTable("export", (string)null);
                });

            modelBuilder.Entity("Ballware.Meta.Data.Persistables.Job", b =>
                {
                    b.Property<long?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long?>("Id"));

                    b.Property<DateTime?>("CreateStamp")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("create_stamp");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("creator_id");

                    b.Property<string>("Identifier")
                        .HasColumnType("text")
                        .HasColumnName("identifier");

                    b.Property<DateTime?>("LastChangeStamp")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_change_stamp");

                    b.Property<Guid?>("LastChangerId")
                        .HasColumnType("uuid")
                        .HasColumnName("last_changer_id");

                    b.Property<string>("Options")
                        .HasColumnType("text")
                        .HasColumnName("options");

                    b.Property<Guid?>("Owner")
                        .HasColumnType("uuid")
                        .HasColumnName("owner");

                    b.Property<string>("Result")
                        .HasColumnType("text")
                        .HasColumnName("result");

                    b.Property<string>("Scheduler")
                        .HasColumnType("text")
                        .HasColumnName("scheduler");

                    b.Property<int>("State")
                        .HasColumnType("integer")
                        .HasColumnName("state");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uuid")
                        .HasColumnName("tenant_id");

                    b.Property<Guid>("Uuid")
                        .HasColumnType("uuid")
                        .HasColumnName("uuid")
                        .HasAnnotation("Relational:JsonPropertyName", "Id");

                    b.HasKey("Id")
                        .HasName("pk_job");

                    b.HasIndex("TenantId")
                        .HasDatabaseName("ix_job_tenant_id");

                    b.HasIndex("TenantId", "Owner")
                        .HasDatabaseName("ix_job_tenant_id_owner");

                    b.HasIndex("TenantId", "Uuid")
                        .IsUnique()
                        .HasDatabaseName("ix_job_tenant_id_uuid");

                    b.ToTable("job", (string)null);
                });

            modelBuilder.Entity("Ballware.Meta.Data.Persistables.Lookup", b =>
                {
                    b.Property<long?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long?>("Id"));

                    b.Property<string>("ByIdQuery")
                        .HasColumnType("text")
                        .HasColumnName("by_id_query");

                    b.Property<DateTime?>("CreateStamp")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("create_stamp");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("creator_id");

                    b.Property<bool>("HasParam")
                        .HasColumnType("boolean")
                        .HasColumnName("has_param");

                    b.Property<string>("Identifier")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("identifier");

                    b.Property<DateTime?>("LastChangeStamp")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_change_stamp");

                    b.Property<Guid?>("LastChangerId")
                        .HasColumnType("uuid")
                        .HasColumnName("last_changer_id");

                    b.Property<string>("ListQuery")
                        .HasColumnType("text")
                        .HasColumnName("list_query");

                    b.Property<bool>("Meta")
                        .HasColumnType("boolean")
                        .HasColumnName("meta");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uuid")
                        .HasColumnName("tenant_id");

                    b.Property<int>("Type")
                        .HasColumnType("integer")
                        .HasColumnName("type");

                    b.Property<Guid>("Uuid")
                        .HasColumnType("uuid")
                        .HasColumnName("uuid")
                        .HasAnnotation("Relational:JsonPropertyName", "Id");

                    b.HasKey("Id")
                        .HasName("pk_lookup");

                    b.HasIndex("TenantId")
                        .HasDatabaseName("ix_lookup_tenant_id");

                    b.HasIndex("TenantId", "Identifier")
                        .IsUnique()
                        .HasDatabaseName("ix_lookup_tenant_id_identifier");

                    b.HasIndex("TenantId", "Uuid")
                        .IsUnique()
                        .HasDatabaseName("ix_lookup_tenant_id_uuid");

                    b.ToTable("lookup", (string)null);
                });

            modelBuilder.Entity("Ballware.Meta.Data.Persistables.MlModel", b =>
                {
                    b.Property<long?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long?>("Id"));

                    b.Property<DateTime?>("CreateStamp")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("create_stamp");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("creator_id");

                    b.Property<string>("Identifier")
                        .HasColumnType("text")
                        .HasColumnName("identifier");

                    b.Property<DateTime?>("LastChangeStamp")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_change_stamp");

                    b.Property<Guid?>("LastChangerId")
                        .HasColumnType("uuid")
                        .HasColumnName("last_changer_id");

                    b.Property<string>("Options")
                        .HasColumnType("text")
                        .HasColumnName("options");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uuid")
                        .HasColumnName("tenant_id");

                    b.Property<string>("TrainResult")
                        .HasColumnType("text")
                        .HasColumnName("train_result");

                    b.Property<string>("TrainSql")
                        .HasColumnType("text")
                        .HasColumnName("train_sql");

                    b.Property<int>("TrainState")
                        .HasColumnType("integer")
                        .HasColumnName("train_state");

                    b.Property<int>("Type")
                        .HasColumnType("integer")
                        .HasColumnName("type");

                    b.Property<Guid>("Uuid")
                        .HasColumnType("uuid")
                        .HasColumnName("uuid")
                        .HasAnnotation("Relational:JsonPropertyName", "Id");

                    b.HasKey("Id")
                        .HasName("pk_ml_model");

                    b.HasIndex("TenantId")
                        .HasDatabaseName("ix_ml_model_tenant_id");

                    b.HasIndex("TenantId", "Identifier")
                        .IsUnique()
                        .HasDatabaseName("ix_ml_model_tenant_id_identifier");

                    b.HasIndex("TenantId", "Uuid")
                        .IsUnique()
                        .HasDatabaseName("ix_ml_model_tenant_id_uuid");

                    b.ToTable("ml_model", (string)null);
                });

            modelBuilder.Entity("Ballware.Meta.Data.Persistables.Notification", b =>
                {
                    b.Property<long?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long?>("Id"));

                    b.Property<DateTime?>("CreateStamp")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("create_stamp");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("creator_id");

                    b.Property<Guid?>("DocumentId")
                        .HasColumnType("uuid")
                        .HasColumnName("document_id");

                    b.Property<string>("Identifier")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnName("identifier");

                    b.Property<DateTime?>("LastChangeStamp")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_change_stamp");

                    b.Property<Guid?>("LastChangerId")
                        .HasColumnType("uuid")
                        .HasColumnName("last_changer_id");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("Params")
                        .HasColumnType("text")
                        .HasColumnName("params");

                    b.Property<int>("State")
                        .HasColumnType("integer")
                        .HasColumnName("state");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uuid")
                        .HasColumnName("tenant_id");

                    b.Property<Guid>("Uuid")
                        .HasColumnType("uuid")
                        .HasColumnName("uuid")
                        .HasAnnotation("Relational:JsonPropertyName", "Id");

                    b.HasKey("Id")
                        .HasName("pk_notification");

                    b.HasIndex("TenantId")
                        .HasDatabaseName("ix_notification_tenant_id");

                    b.HasIndex("TenantId", "Identifier")
                        .IsUnique()
                        .HasDatabaseName("ix_notification_tenant_id_identifier");

                    b.HasIndex("TenantId", "Uuid")
                        .IsUnique()
                        .HasDatabaseName("ix_notification_tenant_id_uuid");

                    b.ToTable("notification", (string)null);
                });

            modelBuilder.Entity("Ballware.Meta.Data.Persistables.NotificationTrigger", b =>
                {
                    b.Property<long?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long?>("Id"));

                    b.Property<DateTime?>("CreateStamp")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("create_stamp");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("creator_id");

                    b.Property<bool>("Finished")
                        .HasColumnType("boolean")
                        .HasColumnName("finished");

                    b.Property<DateTime?>("LastChangeStamp")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_change_stamp");

                    b.Property<Guid?>("LastChangerId")
                        .HasColumnType("uuid")
                        .HasColumnName("last_changer_id");

                    b.Property<Guid>("NotificationId")
                        .HasColumnType("uuid")
                        .HasColumnName("notification_id");

                    b.Property<string>("Params")
                        .HasColumnType("text")
                        .HasColumnName("params");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uuid")
                        .HasColumnName("tenant_id");

                    b.Property<Guid>("Uuid")
                        .HasColumnType("uuid")
                        .HasColumnName("uuid")
                        .HasAnnotation("Relational:JsonPropertyName", "Id");

                    b.HasKey("Id")
                        .HasName("pk_notification_trigger");

                    b.HasIndex("TenantId")
                        .HasDatabaseName("ix_notification_trigger_tenant_id");

                    b.HasIndex("TenantId", "Uuid")
                        .IsUnique()
                        .HasDatabaseName("ix_notification_trigger_tenant_id_uuid");

                    b.ToTable("notification_trigger", (string)null);
                });

            modelBuilder.Entity("Ballware.Meta.Data.Persistables.Page", b =>
                {
                    b.Property<long?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long?>("Id"));

                    b.Property<DateTime?>("CreateStamp")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("create_stamp");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("creator_id");

                    b.Property<string>("CustomScripts")
                        .HasColumnType("text")
                        .HasColumnName("custom_scripts");

                    b.Property<string>("Identifier")
                        .HasColumnType("text")
                        .HasColumnName("identifier");

                    b.Property<DateTime?>("LastChangeStamp")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_change_stamp");

                    b.Property<Guid?>("LastChangerId")
                        .HasColumnType("uuid")
                        .HasColumnName("last_changer_id");

                    b.Property<string>("Layout")
                        .HasColumnType("text")
                        .HasColumnName("layout");

                    b.Property<string>("Lookups")
                        .HasColumnType("text")
                        .HasColumnName("lookups");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("Picklists")
                        .HasColumnType("text")
                        .HasColumnName("picklists");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uuid")
                        .HasColumnName("tenant_id");

                    b.Property<Guid>("Uuid")
                        .HasColumnType("uuid")
                        .HasColumnName("uuid")
                        .HasAnnotation("Relational:JsonPropertyName", "Id");

                    b.HasKey("Id")
                        .HasName("pk_page");

                    b.HasIndex("TenantId")
                        .HasDatabaseName("ix_page_tenant_id");

                    b.HasIndex("TenantId", "Identifier")
                        .IsUnique()
                        .HasDatabaseName("ix_page_tenant_id_identifier");

                    b.HasIndex("TenantId", "Uuid")
                        .IsUnique()
                        .HasDatabaseName("ix_page_tenant_id_uuid");

                    b.ToTable("page", (string)null);
                });

            modelBuilder.Entity("Ballware.Meta.Data.Persistables.Pickvalue", b =>
                {
                    b.Property<long?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long?>("Id"));

                    b.Property<DateTime?>("CreateStamp")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("create_stamp");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("creator_id");

                    b.Property<string>("Entity")
                        .HasColumnType("text")
                        .HasColumnName("entity");

                    b.Property<string>("Field")
                        .HasColumnType("text")
                        .HasColumnName("field");

                    b.Property<DateTime?>("LastChangeStamp")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_change_stamp");

                    b.Property<Guid?>("LastChangerId")
                        .HasColumnType("uuid")
                        .HasColumnName("last_changer_id");

                    b.Property<int?>("Sorting")
                        .HasColumnType("integer")
                        .HasColumnName("sorting");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uuid")
                        .HasColumnName("tenant_id");

                    b.Property<string>("Text")
                        .HasColumnType("text")
                        .HasColumnName("text");

                    b.Property<Guid>("Uuid")
                        .HasColumnType("uuid")
                        .HasColumnName("uuid")
                        .HasAnnotation("Relational:JsonPropertyName", "Id");

                    b.Property<int>("Value")
                        .HasColumnType("integer")
                        .HasColumnName("value");

                    b.HasKey("Id")
                        .HasName("pk_pickvalue");

                    b.HasIndex("TenantId", "Entity")
                        .HasDatabaseName("ix_pickvalue_tenant_id_entity");

                    b.HasIndex("TenantId", "Uuid")
                        .IsUnique()
                        .HasDatabaseName("ix_pickvalue_tenant_id_uuid");

                    b.ToTable("pickvalue", (string)null);
                });

            modelBuilder.Entity("Ballware.Meta.Data.Persistables.ProcessingState", b =>
                {
                    b.Property<long?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long?>("Id"));

                    b.Property<DateTime?>("CreateStamp")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("create_stamp");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("creator_id");

                    b.Property<string>("Entity")
                        .HasColumnType("text")
                        .HasColumnName("entity");

                    b.Property<DateTime?>("LastChangeStamp")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_change_stamp");

                    b.Property<Guid?>("LastChangerId")
                        .HasColumnType("uuid")
                        .HasColumnName("last_changer_id");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<bool>("ReasonRequired")
                        .HasColumnType("boolean")
                        .HasColumnName("reason_required");

                    b.Property<bool>("RecordFinished")
                        .HasColumnType("boolean")
                        .HasColumnName("record_finished");

                    b.Property<bool>("RecordLocked")
                        .HasColumnType("boolean")
                        .HasColumnName("record_locked");

                    b.Property<int>("State")
                        .HasColumnType("integer")
                        .HasColumnName("state");

                    b.Property<string>("Successors")
                        .HasColumnType("text")
                        .HasColumnName("successors");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uuid")
                        .HasColumnName("tenant_id");

                    b.Property<Guid>("Uuid")
                        .HasColumnType("uuid")
                        .HasColumnName("uuid")
                        .HasAnnotation("Relational:JsonPropertyName", "Id");

                    b.HasKey("Id")
                        .HasName("pk_processing_state");

                    b.HasIndex("TenantId", "Entity")
                        .HasDatabaseName("ix_processing_state_tenant_id_entity");

                    b.HasIndex("TenantId", "Uuid")
                        .IsUnique()
                        .HasDatabaseName("ix_processing_state_tenant_id_uuid");

                    b.ToTable("processing_state", (string)null);
                });

            modelBuilder.Entity("Ballware.Meta.Data.Persistables.Statistic", b =>
                {
                    b.Property<long?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long?>("Id"));

                    b.Property<DateTime?>("CreateStamp")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("create_stamp");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("creator_id");

                    b.Property<string>("CustomScripts")
                        .HasColumnType("text")
                        .HasColumnName("custom_scripts");

                    b.Property<string>("Entity")
                        .HasColumnType("text")
                        .HasColumnName("entity");

                    b.Property<string>("FetchScript")
                        .HasColumnType("text")
                        .HasColumnName("fetch_script");

                    b.Property<string>("FetchSql")
                        .HasColumnType("text")
                        .HasColumnName("fetch_sql");

                    b.Property<string>("Identifier")
                        .HasColumnType("text")
                        .HasColumnName("identifier");

                    b.Property<DateTime?>("LastChangeStamp")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_change_stamp");

                    b.Property<Guid?>("LastChangerId")
                        .HasColumnType("uuid")
                        .HasColumnName("last_changer_id");

                    b.Property<string>("Layout")
                        .HasColumnType("text")
                        .HasColumnName("layout");

                    b.Property<string>("MappingScript")
                        .HasColumnType("text")
                        .HasColumnName("mapping_script");

                    b.Property<bool>("Meta")
                        .HasColumnType("boolean")
                        .HasColumnName("meta");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uuid")
                        .HasColumnName("tenant_id");

                    b.Property<Guid>("Uuid")
                        .HasColumnType("uuid")
                        .HasColumnName("uuid")
                        .HasAnnotation("Relational:JsonPropertyName", "Id");

                    b.HasKey("Id")
                        .HasName("pk_statistic");

                    b.HasIndex("TenantId")
                        .HasDatabaseName("ix_statistic_tenant_id");

                    b.HasIndex("TenantId", "Identifier")
                        .IsUnique()
                        .HasDatabaseName("ix_statistic_tenant_id_identifier");

                    b.HasIndex("TenantId", "Uuid")
                        .IsUnique()
                        .HasDatabaseName("ix_statistic_tenant_id_uuid");

                    b.ToTable("statistic", (string)null);
                });

            modelBuilder.Entity("Ballware.Meta.Data.Persistables.Subscription", b =>
                {
                    b.Property<long?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long?>("Id"));

                    b.Property<bool>("Active")
                        .HasColumnType("boolean")
                        .HasColumnName("active");

                    b.Property<bool>("Attachment")
                        .HasColumnType("boolean")
                        .HasColumnName("attachment");

                    b.Property<string>("AttachmentFileName")
                        .HasColumnType("text")
                        .HasColumnName("attachment_file_name");

                    b.Property<string>("Body")
                        .HasColumnType("text")
                        .HasColumnName("body");

                    b.Property<DateTime?>("CreateStamp")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("create_stamp");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("creator_id");

                    b.Property<int>("Frequency")
                        .HasColumnType("integer")
                        .HasColumnName("frequency");

                    b.Property<DateTime?>("LastChangeStamp")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_change_stamp");

                    b.Property<Guid?>("LastChangerId")
                        .HasColumnType("uuid")
                        .HasColumnName("last_changer_id");

                    b.Property<string>("LastError")
                        .HasColumnType("text")
                        .HasColumnName("last_error");

                    b.Property<DateTime?>("LastSendStamp")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_send_stamp");

                    b.Property<string>("Mail")
                        .HasColumnType("text")
                        .HasColumnName("mail");

                    b.Property<Guid>("NotificationId")
                        .HasColumnType("uuid")
                        .HasColumnName("notification_id");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uuid")
                        .HasColumnName("tenant_id");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.Property<Guid>("Uuid")
                        .HasColumnType("uuid")
                        .HasColumnName("uuid")
                        .HasAnnotation("Relational:JsonPropertyName", "Id");

                    b.HasKey("Id")
                        .HasName("pk_subscription");

                    b.HasIndex("Frequency")
                        .HasDatabaseName("ix_subscription_frequency");

                    b.HasIndex("TenantId")
                        .HasDatabaseName("ix_subscription_tenant_id");

                    b.HasIndex("TenantId", "Uuid")
                        .IsUnique()
                        .HasDatabaseName("ix_subscription_tenant_id_uuid");

                    b.ToTable("subscription", (string)null);
                });

            modelBuilder.Entity("Ballware.Meta.Data.Persistables.Tenant", b =>
                {
                    b.Property<long?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long?>("Id"));

                    b.Property<string>("Catalog")
                        .HasColumnType("text")
                        .HasColumnName("catalog");

                    b.Property<DateTime?>("CreateStamp")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("create_stamp");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("creator_id");

                    b.Property<DateTime?>("LastChangeStamp")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_change_stamp");

                    b.Property<Guid?>("LastChangerId")
                        .HasColumnType("uuid")
                        .HasColumnName("last_changer_id");

                    b.Property<bool>("ManagedDatabase")
                        .HasColumnType("boolean")
                        .HasColumnName("managed_database");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("Navigation")
                        .HasColumnType("text")
                        .HasColumnName("navigation");

                    b.Property<string>("Password")
                        .HasColumnType("text")
                        .HasColumnName("password");

                    b.Property<string>("Provider")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("provider");

                    b.Property<string>("ProviderModelDefinition")
                        .HasColumnType("text")
                        .HasColumnName("provider_model_definition");

                    b.Property<string>("ReportSchemaDefinition")
                        .HasColumnType("text")
                        .HasColumnName("report_schema_definition");

                    b.Property<string>("RightsCheckScript")
                        .HasColumnType("text")
                        .HasColumnName("rights_check_script");

                    b.Property<string>("Schema")
                        .HasColumnType("text")
                        .HasColumnName("schema");

                    b.Property<string>("Server")
                        .HasColumnType("text")
                        .HasColumnName("server");

                    b.Property<string>("ServerScriptDefinitions")
                        .HasColumnType("text")
                        .HasColumnName("server_script_definitions");

                    b.Property<string>("Templates")
                        .HasColumnType("text")
                        .HasColumnName("templates");

                    b.Property<string>("User")
                        .HasColumnType("text")
                        .HasColumnName("user");

                    b.Property<Guid>("Uuid")
                        .HasColumnType("uuid")
                        .HasColumnName("uuid")
                        .HasAnnotation("Relational:JsonPropertyName", "Id");

                    b.HasKey("Id")
                        .HasName("pk_tenant");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("ix_tenant_name");

                    b.HasIndex("Uuid")
                        .IsUnique()
                        .HasDatabaseName("ix_tenant_uuid");

                    b.ToTable("tenant", (string)null);
                });

            modelBuilder.Entity("Ballware.Meta.Data.Persistables.TenantDatabaseObject", b =>
                {
                    b.Property<long?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long?>("Id"));

                    b.Property<DateTime?>("CreateStamp")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("create_stamp");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("creator_id");

                    b.Property<DateTime?>("LastChangeStamp")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_change_stamp");

                    b.Property<Guid?>("LastChangerId")
                        .HasColumnType("uuid")
                        .HasColumnName("last_changer_id");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("Sql")
                        .HasColumnType("text")
                        .HasColumnName("sql");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uuid")
                        .HasColumnName("tenant_id");

                    b.Property<int>("Type")
                        .HasColumnType("integer")
                        .HasColumnName("type");

                    b.Property<Guid>("Uuid")
                        .HasColumnType("uuid")
                        .HasColumnName("uuid")
                        .HasAnnotation("Relational:JsonPropertyName", "Id");

                    b.HasKey("Id")
                        .HasName("pk_tenant_database_object");

                    b.HasIndex("TenantId", "Uuid")
                        .IsUnique()
                        .HasDatabaseName("ix_tenant_database_object_tenant_id_uuid");

                    b.HasIndex("TenantId", "Type", "Name")
                        .IsUnique()
                        .HasDatabaseName("ix_tenant_database_object_tenant_id_type_name");

                    b.ToTable("tenant_database_object", (string)null);
                });
#pragma warning restore 612, 618
        }
    }
}
